#+title: GURAFU
* About
GURAFU (グラフ) is a plotting lib for Common Lisp.
(though it's still work in progress...)

GURAFU learnt a lot from CLIM (McCLIM) and SCIGRAPH,
though, I hop GURAFU would not be too complex.

* How to Use
Right now it's quite mass... though you could load
=gurafu/core= and then switch into =gurafu/core= package,
and try the following code:

#+begin_src lisp
  (define-presentation labeled-point ()
    ((label :initform "" :initarg :label)
     (style :initform :dot :initarg :point-style))
    (:draw
     (%uv-left %uv-top style label)
     (draw-point self 0 0 :point-style style :pen-width 5)
     (draw-text  self 0 16 label :font-size 16 :text-align :center)))

  (defun present-labled-point (label x y style)
    (present (make-instance 'labeled-point
                            :label label :left x :top y
                            :point-style style)))

  (let* ((*default-backend* (make-backend :opticl :width 200 :height 200))
         (patterns '(("DOT" :dot)
                     ("CIRCLE" :circle)
                     ("PLUS" :plus)
                     ("BOX"  :box)
                     ("CROSS" :cross)
                     ("TRIANGLE" :triangle))))
    (loop for col below 2 do
      (loop for row below 3 do
        (destructuring-bind (label style)
            (pop patterns)
          (present-labled-point
           label (* 60 (1+ col)) (* 50 (1+ row)) style))))
    (output! *default-backend* "/path/to/demo-img/first-usable-demo.png"))
#+end_src

You could see the result as below:

[[./demo-img/first-usable-demo.png]]

Here's a more advanced (although still very dirty) example for drawing a plot:

#+begin_src lisp
  (let* ((*default-backend* (make-backend :opticl :width 400 :height 400))
         ((plot (make-instance 'plot :margin 10))))
    (add-plot-data plot 'sin
                   (loop for x from -10.0 upto 10.0 by 0.1
                         collect (list x (sin x)))
                   :color +yellow+)
    (add-plot-data plot 'sqaure
                   (loop for x from -10.0 upto 10.0 by 0.1
                         collect (list x (cos x)))
                   :color +green+)
    (rescale-plot-pane plot)
    (set-stream-bounding-box plot 0 400 400 0)
    (present plot)
    (output! *default-backend* "/path/to/first-usable-plot-sin-cos-demo.png"))
#+end_src

You could see the result as below:

[[./demo-img/first-usable-plot-sin-cos-demo.png]]

I hope I shall later implement more plot styles with
a more easier to use interface.

But I have to slow down the developing space...
Clean the code, write some docs. But every time
when I have to refer to Mathematica's =Plot=, or
Python's =matplotlib=, I shall consider adding
similar functionality into GURAFU. 

* Work in Progress
Here are some little developing memos about GURAFU:

+ GURAFU should be device independent. It should
  support different backends.

  Although currently backend output only =opticl= is done...
+ =opticl= backend use BDF font (UNIFONT) for =draw-char!=

** Naming Conventions
+ GURAFU class slot variables should be prefixed with =%=,
  for example =%backend=, =%width=, =%height=;
+ GURAFU low-level operation methods should be postfixed
  with =!=, for example =draw-text!=, =draw-line!=;
+ GURAFU constants should be wrapped with =+=, for example
  =+white+=, =+black+=;
+ GURAFU global variables should be wrapped with =*=, for
  example =*foreground-color*=, =*background-color*=;
  
